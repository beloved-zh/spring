<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/aop
          https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--
        SpringAop中，通过Advice定义横切逻辑，spring中支持5种类型的Advice
        通知类型            连接点             实现接口
        前置通知            方法前             MethodBeforeAdvice
        后置通知            方法后             AfterReturningAdvice
        环绕通知            方法前后            MethodInterceptor
        异常抛出通知         方法抛出异常        ThrowsAdvice
        引介通知            类中增加新的方法属性  IntroductionInterceptor
    -->

    <!--注册bean-->
    <bean id="userService" class="com.zh.service.UserServiceImpl"></bean>
    <bean id="log" class="com.zh.log.Log"></bean>
    <bean id="afterLog" class="com.zh.log.AfterLog"></bean>

    <!--方式一 ：使用原生Spring Aop接口-->
    <!--配置aop：需要导入aop的约束-->
    <!--<aop:config>
        &lt;!&ndash;切入点 expression:表达式  execution(要执行的位置*****)
            *(修饰词) *(返回值) *(类名) *(方法名) *(参数)
        &ndash;&gt;
        <aop:pointcut id="pointcut" expression="execution(* com.zh.service.UserServiceImpl.*(..))"/>
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"></aop:advisor>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"></aop:advisor>
    </aop:config>-->

    <!--方式二：自定义类-->
    <bean id="diy" class="com.zh.diy.DiyPointCut"></bean>
    <aop:config>
        <!--自定义切面 ref要引用的类-->
        <aop:aspect ref="diy">
            <!--切入点-->
            <aop:pointcut id="point" expression="execution(* com.zh.service.UserServiceImpl.*(..))"/>
            <!--类中的方法-->
            <aop:before method="befare" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>

        </aop:aspect>
    </aop:config>

    <!--方式三：使用注解实现aop-->
    <!--<bean id="annotationPointCut" class="com.zh.diy.AnnotationPointCut"></bean>
    &lt;!&ndash;开启aop注解支持&ndash;&gt;
    <aop:aspectj-autoproxy/>-->
</beans>

































